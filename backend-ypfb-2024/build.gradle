plugins {
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'org.sonarqube' version '3.0'
}

group 'gob.ypfb'
version '1.0.0'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url "https://jaspersoft.jfrog.io/jaspersoft/third-party-ce-artifacts/" }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.7.18'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.7.18'

    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    runtimeOnly 'org.postgresql:postgresql:42.5.4'

    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.25.6'
    //implementation group: 'io.github.jhipster', name: 'jhipster-framework', version: '3.9.1'

    annotationProcessor group: 'org.hibernate', name: 'hibernate-jpamodelgen'
    implementation group: 'com.vladmihalcea', name: 'hibernate-types-52', version: '2.21.1'

    implementation group: 'org.modelmapper', name: 'modelmapper', version: '3.2.0'
    implementation group: 'org.modelmapper.extensions', name: 'modelmapper-gson', version: '3.2.0'

    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.7.0'
    implementation group: 'io.swagger', name: 'swagger-annotations', version: '2.0.0-rc2'

    implementation group: 'net.sf.jasperreports', name: 'jasperreports', version: '6.21.0'
    implementation 'net.sf.jasperreports:jasperreports-fonts:6.21.0'

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.14.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.15.1'
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.2.5'


    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.16.1'
    //
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //testImplementation group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.10.0'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.1'

}

test {
    useJUnitPlatform()
}

/*jar {
    manifest {
        attributes(
            'Main-Class': 'gob.ypfb.lumira.app.Application',
        )
    }
}*/
bootJar {
    archiveFileName = "${bootJar.archiveBaseName.get()}.${bootJar.archiveExtension.get()}"
}


jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.0
            }
        }
    }
}

checkstyle {
    group = 'checkstyle'
    description = 'Task Checkstyle'
    checkstyleTest.enabled = true
    configFile = file("${project.rootDir}/config/checkstyle.xml")
    toolVersion = '8.42'
}

tasks.withType(Checkstyle) {
    group = 'checkstyle'
    description = 'Task Checkstyle'
    ignoreFailures = false // Change to 'true' if you want lint errors to not fail the build
}


private static String getRegistry() {
    return "reg.ypfb.gob.bo/soluciones/cc/gtic/dev/plantilla/backend"
}


String getDockerImageName() {
    return "${registry}:${version}"
}

task buildDockerImage(type: Exec) {
    group = 'docker'
    description = 'Build a docker image'
    doFirst {
        System.out.println(">> Creating image: " + getDockerImageName());
        commandLine 'docker', 'build', '--rm', '-f', 'Dockerfile', '-t', "${dockerImageName}", '.'
    }
}

task pushDockerImage(type: Exec) {
    group = 'docker'
    description = 'Push a docker image to registry'
    System.out.println(">> Pushing image: " + getDockerImageName());
    commandLine 'docker', 'push', "${dockerImageName}" // version
}